{
    "collab_server" : "",
    "contents" : "library(readr)\nlibrary(readxl)\nlibrary(haven)\nlibrary(jsonlite)\nlibrary(xml2)\nlibrary(foreign)\nlibrary(sas7bdat)\n\n# comma separated values\nread.csv('hsb2.csv', header = TRUE)\n\n# using readr\nread_csv('hsb2.csv')\nread_delim('hsb2.csv', delim = ',')\n\n# data does not include column names\nread_csv('hsb2.csv', col_names = FALSE)\nread_delim('hsb2.csv', delim = ',', col_names = FALSE)\n\n# skip a few lines\nread_csv('hsb2.csv', skip = 5)\nread_delim('hsb2.csv', delim = ',', skip = 5)\n\n# maximum number of lines to read\nread_csv('hsb2.csv', n_max = 50)\nread_delim('hsb2.csv', delim = ',', n_max = 50)\n\n\n# specify column types\nread_csv('hsb2.csv',\n  col_types = list(col_integer(), col_factor(levels = c(0, 1)), \n                   col_factor(levels = c(1, 2, 3, 4)),\n                   col_factor(levels = c(1, 2, 3)), \n                   col_factor(levels = c(1, 2)), \n                   col_factor(levels = c(1, 2, 3)),\n                   col_integer(), col_integer(), col_integer(),\n                   col_integer(), col_integer())            \n)\n\n# read only specific columns\nread_csv('hsb2.csv', \n  col_types = cols_only(id = col_integer(),\n                        prog = col_factor(levels = c(1, 2, 3)),\n                        read = col_integer())\n)\n\n# explain parse_* functions\n# parse_character()\n# parse_date()\n# parse_datetime()\n# parse_double()\n# parse_factor()\n# parse_integer()\n# parse_guess()\n# spec_csv()\n\n# semicolon separated values\nread.csv2('hsb.csv', header = TRUE)\n\n# using readr\nread_csv2('hsb.csv')\nread_delim('hsb.csv', delim = ';')\n\n# data does not include column names\nread_csv2('hsb.csv', col_names = FALSE)\nread_delim('hsb.csv', delim = ';', col_names = FALSE)\n\n# skip a few lines\nread_csv2('hsb.csv', skip = 5)\nread_delim('hsb.csv', delim = ';', skip = 5)\n\n# maximum number of lines to read\nread_csv2('hsb.csv', n_max = 50)\nread_delim('hsb.csv', delim = ';', n_max = 50)\n\n\n# specify column types\nread_csv2('hsb.csv',\n         col_types = list(col_integer(), col_factor(levels = c(0, 1)), \n                          col_factor(levels = c(1, 2, 3, 4)),\n                          col_factor(levels = c(1, 2, 3)), \n                          col_factor(levels = c(1, 2)), \n                          col_factor(levels = c(1, 2, 3)),\n                          col_integer(), col_integer(), col_integer(),\n                          col_integer(), col_integer())            \n)\n\n# read only specific columns\nread_csv2('hsb.csv', \n         col_types = cols_only(id = col_integer(),\n                               prog = col_factor(levels = c(1, 2, 3)),\n                               read = col_integer())\n)\n\n# tab separated values\nread.delim('mtcars.tsv', dec = '.')  # use read.delim2 if decimal separator is ,\nread.table('mtcars.tsv', sep = '\\t', header = TRUE, dec = '.')\n\n# using readr\nread_tsv('mtcars.tsv')\nread_delim('mtcars.tsv', delim = '\\t')\n\n# data does not include column names\nread_tsv('mtcars.tsv', col_names = FALSE)\nread_delim('mtcars.tsv', delim = '\\t', col_names =  FALSE)\n\n# skip a few lines\nread_tsv('mtcars.tsv', skip = 5)\nread_delim('mtcars.tsv', delim = '\\t', skip = 5)\n\n# maximum number of lines to read\nread_tsv('mtcars.tsv', n_max = 10)\nread_delim('mtcars.tsv', delim = '\\t', n_max = 10)\n\n\n# specify column types\nread_tsv('mtcars.tsv',\n          col_types = list(col_double(), col_factor(levels = c(4, 6, 8)), \n                           col_double(), col_double(), col_double(),\n                           col_double(), col_double(),\n                           col_factor(levels = c(0, 1)), \n                           col_factor(levels = c(0, 1)), \n                           col_factor(levels = c(3, 4, 5)),\n                           col_factor(levels = c(1, 2, 3, 4, 6, 8)))            \n)\n\n# read only specific columns\nread_tsv('mtcars.tsv', \n          col_types = cols_only(mpg = col_double(),\n                                cyl = col_factor(levels = c(4, 6, 8)),\n                                disp = col_double(),\n                                gear = col_factor(levels = c(3, 4, 5)))\n)\n\n\n# space separated values\nread.table('hsb1.csv', header = TRUE, sep = \" \")\nread_table('hsb1.csv')  # fails\nread_table2('hsb1.csv')\n\n# data does not include column names\nread_table2('hsb1.csv', col_names = FALSE)\n\n# skip a few lines\nread_table2('hsb1.csv', skip = 5)\n\n# maximum number of lines to read\nread_table2('hsb1.csv', n_max = 10)\n\n# specify column types\nread_table2('hsb1.csv',\n          col_types = list(col_integer(), col_factor(levels = c(0, 1)), \n                           col_factor(levels = c(1, 2, 3, 4)),\n                           col_factor(levels = c(1, 2, 3)), \n                           col_factor(levels = c(1, 2)), \n                           col_factor(levels = c(1, 2, 3)),\n                           col_integer(), col_integer(), col_integer(),\n                           col_integer(), col_integer())            \n)\n\n# read only specific columns\nread_table2('hsb1.csv', \n          col_types = cols_only(id = col_integer(),\n                                prog = col_factor(levels = c(1, 2, 3)),\n                                read = col_integer())\n)\n\n# read .txt files\nread_csv('hsb.txt')  # incorrect\nread_delim('hsb.txt', delim = ',')  # incorrect\nread_table('hsb.txt')  # incorrect\nread_table2('hsb.txt')  # correct\n\n\n# read excel files\n# list sheets in a excel file\nexcel_sheets('sample2.xls')\nreadxl::read_excel('sample2.xls', sheet = 1)\nreadxl::read_excel('sample2.xls', sheet = 2)\n\n# remember first row is always column name in excel\n# so add 1 to row number while selecting the cell\n\n# read specific cells\nreadxl::read_excel('sample2.xls', sheet = 2,\n                   range = \"B3:C7\")\n\nreadxl::read_excel('sample2.xls', sheet = 2,\n                   range = \"A3:C5\")\n\n# single row\nreadxl::read_excel('sample2.xls', sheet = 2,\n                   range = \"A3:C4\")\n\nreadxl::read_excel('sample2.xls', sheet = 2,\n                   range = anchored(\"A4\", dim = c(3, 2)),\n                   col_names = FALSE)\n\n# specify only rows\nreadxl::read_excel('sample2.xls', sheet = 2,\n                   range = cell_rows(3:6))\n\n# specify only columns\nreadxl::read_excel('sample2.xls', sheet = 2,\n                   range = cell_cols(2:3))\n\n# single column\nreadxl::read_excel('sample2.xls', sheet = 2,\n                   range = cell_cols(2))\n\n# use cell_limits to specify one end of the rectangle\n# such as top left or top right\n\nreadxl::read_excel('sample2.xls', sheet = 2,\n                   range = cell_limits(c(1, 2), c(NA, NA)))\n\n\nreadxl::read_excel('sample2.xls', sheet = 2,\n                   range = cell_limits(c(3, NA), c(NA, 2)))\n\n# mention other packages that can be used to import the files\n# sas: sas7bdat (last updated in 2014; version 0.5)\n# stata, spss: foreign (maintained; version 0.8)\n\n# stata\nhaven::read_dta('airline.dta')    # tibble\nhaven::read_stata('airline.dta')  # tibble\nforeign::read.dta('airline.dta')  # data.frame\n\n# spss\nread_sav('employee.sav')   # tibble\nread_spss('employee.sav')  # tibble\nforeign::read.spss('employee.sav', use.value.labels = FALSE,\n                   to.data.frame = TRUE)\n\n# stata\nread_sas('airline.sas7bdat')\nsas7bdat::read.sas7bdat('airline.sas7bdat')\n",
    "created" : 1500253422954.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1194261828",
    "id" : "C0DCE838",
    "lastKnownWriteTime" : 1500276696,
    "last_content_update" : 1500276696598,
    "path" : "J:/gist/dataio/import-blog-part-1.R",
    "project_path" : "import-blog-part-1.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}